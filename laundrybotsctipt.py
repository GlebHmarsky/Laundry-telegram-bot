# -*- coding: utf-8 -*-
"""LaundryBotSctipt

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bzErvWAELi9cBnMTR9jkWEM9-Kojo1ON
"""
# Before running script be sure you install deps
# pip install python-telegram-bot

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler,Filters, CallbackQueryHandler, MessageHandler, CallbackContext
from telegram.ext import JobQueue

# from telegram.ext import Filters

logging.basicConfig(level=logging.INFO)

TOKEN = "6135601546:AAECHTEz5rso2liRcocwAot0rXClNVs6xKk"

# Stores users' laundry info: {user_id: {"white": 0, "light": 0, "dark": 0, "black": 0}}
users_laundry = {}
# Stores users in laundry groups: {color: [user_ids]}
laundry_groups = {"white": [], "light": [], "dark": [], "black": []}

def start(update: Update, context: CallbackContext):
    update.message.reply_text("Welcome to the Laundry Organizer! Use /addlaundry to add your laundry items.")

def add_laundry(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    color_keyboard = [
        [InlineKeyboardButton("White", callback_data=f"white_{user_id}")],
        [InlineKeyboardButton("Colored", callback_data=f"colored_{user_id}")],
        [InlineKeyboardButton("Black", callback_data=f"black_{user_id}")]
    ]
    reply_markup = ReplyKeyboardMarkup(color_keyboard, resize_keyboard=True)
    update.message.reply_text("Choose the color of the laundry item you want to add:", reply_markup=reply_markup)

def add_color(update: Update, context: CallbackContext):
    color = update.message.text.lower()
    user_id = update.message.from_user.id
    color = query.data.split("_")[1]
    users_laundry[user_id][color] += 1
    
    if user_id not in laundry_groups[color]:
        laundry_groups[color].append(user_id)
    update.message.reply_text(f"Added 1 {color} item to your laundry list. Use /addlaundry to add more items.")

def match_laundry(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in users_laundry:
        update.message.reply_text("You haven't added any laundry items yet. Use /addlaundry to add items.")
        return

    user_laundry = users_laundry[user_id]
    matched_colors = []
    for color, count in user_laundry.items():
        if count > 0 and len(laundry_groups[color]) > 1:
            matched_colors.append(color)
    if matched_colors:
        response = "You have matched laundry groups for the following colors:\n"
        for color in matched_colors:
            group_members = [str(user) for user in laundry_groups[color] if user != user_id]
            response += f"{color.capitalize()}: {', '.join(group_members)}\n"
        update.message.reply_text(response)
    else:
        update.message.reply_text("No matches found for your laundry. Add more items with /addlaundry or wait for others to join.")

def main():
    updater = Updater(TOKEN, use_context=True)

    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("addlaundry", add_laundry))
    dispatcher.add_handler(CommandHandler("matchlaundry", match_laundry))
    dispatcher.add_handler(MessageHandler(Filters.text(["White", "Colored", "Black"]), add_color))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()