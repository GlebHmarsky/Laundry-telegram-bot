# -*- coding: utf-8 -*-
"""LaundryBotSctipt

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bzErvWAELi9cBnMTR9jkWEM9-Kojo1ON
"""
# Before running script be sure you install deps
# pip install python-telegram-bot
import json

import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, Filters, CallbackQueryHandler, MessageHandler, CallbackContext
from telegram.ext import JobQueue

# from telegram.ext import Filters

logging.basicConfig(level=logging.INFO)

TOKEN = "6135601546:AAECHTEz5rso2liRcocwAot0rXClNVs6xKk"

# Stores users' laundry info: {user_id: {"white": 0, "light": 0, "dark": 0, "black": 0}}
users_laundry = {}
# Stores users in laundry groups: {color: [user_ids]}
laundry_groups = {"white": [], "colored": [], "black": []}


def start(update: Update, context: CallbackContext):
    menu_text = (
        "Welcome to the Laundry Organizer! Here are the available commands:\n\n"
        "/addlaundry - Add a laundry item\n"
        "/matchlaundry - Find laundry matches\n"
        "/showlaundry - Show your added laundry\n"
        "/showlaundry all - Show all added laundry by everyone\n"
        # Add more lines for other available commands
    )
    update.message.reply_text(menu_text)


def add_laundry(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in users_laundry:
        users_laundry[user_id] = {"white": 0, "colored": 0, "black": 0}

    color_keyboard = [
        [KeyboardButton("White", callback_data=f"white_{user_id}")],
        [KeyboardButton("Colored", callback_data=f"colored_{user_id}")],
        [KeyboardButton("Black", callback_data=f"black_{user_id}")]
    ]
    reply_markup = ReplyKeyboardMarkup(color_keyboard, resize_keyboard=True)
    update.message.reply_text(
        "Choose the color of the laundry item you want to add:", reply_markup=reply_markup)


def add_color(update: Update, context: CallbackContext):
    color = update.message.text.lower()
    user_id = str(update.message.from_user.id)

    # Load the current laundry data.
    laundry_data = load_data()

    # If the user is not in the laundry_data, create an entry for them.
    if user_id not in laundry_data:
        laundry_data[user_id] = {'white': 0, 'colored': 0, 'black': 0}

    # Add the laundry item to the user's data.
    laundry_data[user_id][color] += 1

    # Save the updated laundry data.
    save_data(laundry_data)

    update.message.reply_text(f"Added 1 {color} item to your laundry list. Use /addlaundry to add more items.", reply_markup=ReplyKeyboardRemove())

def show_laundry(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    show_all = 'all' in context.args

    # Load the current laundry data.
    laundry_data = load_data()

    if show_all:
        if not laundry_data:
            update.message.reply_text("No laundry items have been added by any user.")
            return

        laundry_message = "Here's the laundry added by everyone:\n\n"
        for user, user_laundry in laundry_data.items():
            laundry_message += f"User {user}:\n"
            for color, count in user_laundry.items():
                laundry_message += f"{color.capitalize()}: {count}\n"
            laundry_message += "\n"
    else:
        # Check if the user has any laundry data.
        if user_id not in laundry_data:
            update.message.reply_text("You haven't added any laundry items yet.")
            return

        # Create a message with the user's laundry data.
        user_laundry = laundry_data[user_id]
        laundry_message = "Here's your added laundry:\n"
        for color, count in user_laundry.items():
            laundry_message += f"{color.capitalize()}: {count}\n"

    update.message.reply_text(laundry_message)



def load_data(file_name="laundry_data.json"):
    try:
        with open(file_name, "r") as file:
            data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        data = {}
    return data

def save_data(data, file_name="laundry_data.json"):
    with open(file_name, "w") as file:
        json.dump(data, file)



def match_laundry(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in users_laundry:
        update.message.reply_text(
            "You haven't added any laundry items yet. Use /addlaundry to add items.")
        return

    user_laundry = users_laundry[user_id]
    matched_colors = []
    for color, count in user_laundry.items():
        if count > 0 and len(laundry_groups[color]) > 1:
            matched_colors.append(color)
    if matched_colors:
        response = "You have matched laundry groups for the following colors:\n"
        for color in matched_colors:
            group_members = [str(user)
                             for user in laundry_groups[color] if user != user_id]
            response += f"{color.capitalize()}: {', '.join(group_members)}\n"
        update.message.reply_text(response)
    else:
        update.message.reply_text(
            "No matches found for your laundry. Add more items with /addlaundry or wait for others to join.")


def main():
    updater = Updater(TOKEN, use_context=True)

    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("addlaundry", add_laundry))
    dispatcher.add_handler(CommandHandler("matchlaundry", match_laundry))
    dispatcher.add_handler(CommandHandler("showlaundry", show_laundry))
    dispatcher.add_handler(MessageHandler(
        Filters.text(["White", "Colored", "Black"]), add_color))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
